第18章 使用asyncio包处理并发
并发是指一次处理多事件.
并行是指一次做多件事.
二者不同,但是有联系.
一个关于结构,一个关于执行.
并发用于指定方案,用来解决可能(但未必)并行的问题

asyncio包,使用事件循环驱动的协程实现并发.
asyncio大量使用yield from表达式

本章话题:
对比一个简单的多线程程序和对应的asyncio版,说明多线程和异步任务之间的关系
asyncio.Future类与concurrent.futures.Future类之间的区别
第17章中下载国旗那些示例的异步版
摒弃线程或进程,如何使用异步编程管理网络应用中的高并发
在异步编程中,与回调相比,协程显著提升性能的方式
如何把阻塞的操作交给线程池处理,从而避免阻塞事件循环
使用asyncio编写服务器,重新审视Web应用对高并发的处理方式
为什么asyncio已经准备好对Python生态系统产生重大影响


通过简单的示例对比threading模块和asyncio包
18.1 线程与协程对比
示例18-1 spinner_thread.py:通过线程以动画形式显示文本式旋转指针
注意,Python没有提供终止线程的API.
若想要关闭线程,必须给线程发送消息.

使用@asyncio.coroutine装饰器替代线程,实现相同的行为
#asyncio包使用的"协程"是较严格的定义.是和asyncio API的协程在定义体中必须使用yield from,
而不能使用yield.此外,适合asyncio的协程要由调用方驱动,并由调用方通过yield from调用;
或者把协程传给asyncio包中的某个函数,例如asyncio.async(...)和本章要介绍的其他函数,
从而驱动协程.最后,@asyncio.coroutine装饰器应该应用在协程上
示例18-2 spinner_asyncio.py:通过协程以动画形式显示文本式旋转指针