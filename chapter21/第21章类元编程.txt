第21章 类元编程
类元编程是指在运行时创建或定制类的技艺.在Python中,类时一等对象,因此任何时候都可以使用函数新建类,
而无需使用class关键字.类装饰器也时函数,不过能够审查,修改,甚至把被装饰的类替换成其他类.
最后,元类是类元编程最高级的工具:使用元类可以创建具有某种特质的全新类种,例如我们见过的抽象基类
元类功能强大,但是难以掌握.类装饰器能使用更简单的方式解决很多问题.
导入时和运行时的区别--这是有效使用Python元编程的重要基础
除非开发框架,否则不要编写元类


如何在运行时创建类
21.1 类工厂函数
type视作函数type(my_object)获取对象所属的类作用于my_object.__class__相同.
然而,type是一个类.MyClass = type('MyClass', (MySuperClass, MyMinin), {'x': 42, 'x2': lambda self: self.x * 2})
三个参数为name,bases和dict(一个映射,制定新类的属性名和值)
type的实例是类
record_factory函数最后一行会构建一个类,类的名称是cls_name参数的值,唯一的直接超类是object,有
__slots__,__init__,__iter__和__repr__四个类属性,其中后三个是实例方法
本可以把__slots__类属性的名称改成其他值,不过那样就要实现__setattr__方法,
为属性赋值时验证属性的名称,因为对于记录这样的类,我们希望属性始终时固定的那几个,而且顺序相同
__slots__属性的主要特色时节省内存,能处理几百万个实例,不过也有一些缺点.
另一种方式:
先声明一个_class_template变量,其值是字符串形式的源码模板;然后在namedtuple函数中调用_class_template.format(...)方法,
填充模板里的空白;最后,使用内置的exec函数计算得到的源码字符串
!!!在Python中做元编程时,最好不用exec和eval函数.如果接受的字符串(或片段)来自不可信的源,那么这两个函数会带来严重的安全风险.
!!!Python提供了充足的内省工具,大多数时候不需要使用exec和eval函数.这样做是为了让生成的类代码能通过.source属性获取
record_factory函数创建的类,其实例有个局限--不能序列化,即不能使用pickle模块里的dump/load函数处理.


21.2 定制描述符的类装饰器
LineItem未解决的问题:储存属性的名称不具有描述性,即属性(如weight)的值存储在名为_Quantity#0的实例属性中,这样的名称有点不便于调试
不能使用描述性的储存属性名称,因为实例化描述符时无法得知托管属性(即绑定到描述符上的类属性,例如weight)的名称.
可是,一旦组建好整个类,而且把描述符绑定到类属性上之后,我们就可以审查类,并为描述符设置合理的储存属性名称.
LineItem类的__new__方法可以做到这一点,因此,在__init__方法中使用描述符时,储存属性已经设置了正确的名称.
为了解决这个问题而使用__new__方法纯属白费力气:每次新建LineItem实例时都会运行__new__方法中的逻辑,可是,一旦LineItem类构建好了,
描述符与托管属性之间的绑定就不会变了.
因此,我们要在创建类时设置储存属性的名称.使用类装饰器或元类可以做到这一点

类装饰器与函数装饰器非常相似,是参数为类对象的函数,返回原来的类或修改后的类.

示例21-3中,解释器会计算LineItem类,把返回的类对象传给model.entity函数.Python会把LineItem这个全局名称绑定给model.entity函数返回
的对象.在这个示例中,model.entity函数会返回原先的LineItem类,但是会修改各个描述符实例的storage_name属性
buldfood_v6.py
类装饰器能以较简单的方式做到以前需要使用元类去做的事情---创建类时定制类
类装饰器的重大缺点:只能对直接依附的类有效.
这意味着,被装饰的类的子类可能继承也可能不继承装饰器所做的改动,具体情况视改动的方式而定


21.3 导入时和运行时比较
Python解释器什么时候计算各个代码块
区分"导入时"和"运行时",不过这两个术语没有严格的定义,而且二者之间存在这灰色地带.
在导入时,解释器会从上到下一次性解析完.py模块的源码,然后生成用于执行的字节码.如果句法有错误,就在此时报告.
如果本地的__pycache__文件夹中有最新的.pyc文件,解释器会跳过上述步骤,因为已经有运行所需的字节码了.
编译肯定时导入时的活动,不过那个时期还会做其他事,因为Python中的语句几乎都是可执行的,也就是说语句可能会运行用户代码,
修改用户程序的状态.尤其是import语句,它不只是声明,在进程中首次导入模块时,还会运行所导入模块中的全部顶层代码---以后导入相同的
模块则使用缓存,只做名称绑定.那些顶层代码可以做任何事,包括通常在"运行时"做的事,例如连接数据库.
因此,"导入时"与"运行时"之间的界线是模糊的:import语句可以触发任何"运行时"行为.
导入时会"运行全部顶层代码",但是"顶层代码"会经过一些加工.导入模块时,解释器会执行顶层的def语句,可是这么做有什么作用呢?
解释器会编译函数的定义体(首次导入模块时),把函数对象绑定到对应的全局名称上,但是显然解释器不会执行函数的定义体.
通常这意味着解释器在导入时定义顶层函数,但是仅当在运行时调用函数时才会执行函数的定义体.
对类来说,情况就不同了:在导入时,解释器会执行每个类的定义体,甚至会执行嵌套类的定义体.执行类定义体的结果是,
定义了类的属性和方法,并构建了类对象.
从这个意义上理解,类的定义体属于"顶层代码",因为它在导入时运行.

理解计算时间的练习
01,场景1的解答
import evaltime
<[100]> evalsupport module start # 1.evalsupport模块中的所有顶层代码在导入模块时运行;解释器会编译deco_alpha函数,但不会执行定义体
<[400]> MetaAleph body # 2.MetaAleph类的定义体运行了
<[700]> evalsupport module end
<[1]> evaltime module start
<[2]> ClassOne body # 3.每个类的定义体都执行了...
<[6]> ClassTwo body # 4...包括嵌套的类
<[7]> ClassThree body
<[200]> deco_alpha # 5.先计算被装饰的类ClassThree的定义体
<[9]> ClassFour body
<[14]> evaltime module end # 6.evaltime模块是导入的,因此不会运行if __name__ == '__main__':块
场景1注意点:
1)这个场景由简单的import evaltime语句触发
2)解释器会执行所导入模块及其以来(evalsupport)中的每个类定义体
3)解释器会先计算类的定义体,然后,调用依附在类上的装饰器函数,这是合理的行为,因为必须先构建类对象,装饰器才有类对象可处理
4)在这个场景中,只运行了一个用户定义的函数或方法---deco_alpha装饰器
02,场景2的解答:
python evaltime.py
<[100]> evalsupport module start
<[400]> MetaAleph body
<[700]> evalsupport module end
<[1]> evaltime module start
<[2]> ClassOne body
<[6]> ClassTwo body
<[7]> ClassThree body
<[200]> deco_alpha
<[9]> ClassFour body # 输出与场景一相同
<[11]> ClassOne tests ..............................
<[3]> ClassOne.__init__ # 2.类的标准行为
<[5]> ClassOne.method_x
<[12]> ClassThree tests ..............................
<[300]> deco_alpha:inner_1 # 3.deco_alpha装饰器修改了ClassThree.method_y方法,因此调用three.method_y()时会运行inner_1函数的定义体
<[13]> ClassFour test ..............................
<[10]> ClassFour.method_y
<[14]> evaltime module end
<[4]> ClassOne.__del__ # 只有程序结束时,绑定在全局变量one的ClassOne实例才会被垃圾回收程序处理
场景2主要想说明的是,类装饰器可能对子类没有影响.
示例21-6中,我们把ClassFour定义为ClassThree的子类.ClassThree类上依附的@deco_alpha装饰器把method_y方法替换掉了,
但是对ClassFour类根本没有影响.当然,如果ClassFour.method_y方法使用super(...)调用ClassThree.method_y方法,我们便会看到
装饰器起作用,执行inner_1函数.


与此不同的是,如果想定制整个类层次结构,而不是一次只定制一个类,使用元类更高效
21.4 元类基础知识
元类是制造类的工厂,不过不是函数,而是类.
元类的构建类的类
根据Python对象模型,类是对象,因此类肯定是另外某个类的实例.
默认情况下,Python中的类是type类的实例.也就是说,
type是大多数内置的类和用户定义的类的元类
'spam'.__class__
Out[4]: str
str.__class__
Out[5]: type
from bulkfood_v6 import  LineItem
LineItem.__class__
Out[7]: type
type.__class__
Out[8]: type
为了避免无限回溯,type是其自身的实例
注意,我没有说str或LineItem继承自type.
我的意思是,str和LineItem是type的实例.这两个类是object的子类.
str,type和LineItem是object的子类.
而str,object和LineItem是type的实例,因为他们都是类.
!object类和type类之间的关系很独特:object是type的实例,而type是object的子类.
!这种关系很"神奇",无法使用Python代码表述,因为定义其中一个之前另一个必须存在.
!type是自身的实例这一点也很神奇
除了type,标准库中还有一些别的元类,例如ABCMeta和Enum.
collections.Iterable所属的类是abc.ABCMeta.
Iterable是抽象类,而ABCMeta不是--不管怎样Iterable是ABCMeta的实例
import collections
collections.Iterable.__class__
Out[10]: abc.ABCMeta
import abc
abc.ABCMeta.__class__
Out[12]: type
abc.ABCMeta.__mro__
Out[13]: (abc.ABCMeta, type, object)
向上追溯,ABCMeta最终所属的类也是type.所有类都直接或间接地是type地实例,不过只有元类同时也是type的子类.
元类(如ABCMeta)从type类继承了构建类的能力
所有类都是type的实例,但是元类还是type的子类,因此可以作为制造类的工厂.
具体来说,元类可以通过实现__init__方法定制实例.元类的__init__方法可以做到类装饰器能做的任何事情,但是作用更大

理解元类计算时间的练习
示例21-10 evaltime_meta.py
场景3在Python控制台中以交互的方式导入evaltime_meta.py模块
<[100]> evalsupport module start
<[400]> MetaAleph body
<[700]> evalsupport module end
<[1]> evaltime_meta module start
<[2]> ClassThree body
<[200]> deco_alpha
<[4]> ClassFour body
<[6]> ClassFive body
<[500]> MetaAleph.__init__ # 1.与场景1的关键区别是,创建ClassFive时调用了MetaAleph.__init__方法
<[9]> ClassSix body
<[500]> MetaAleph.__init__ # 2.创建ClassFive的子类ClassSix时也调用了MetaAleph.__init__方法
<[15]> evaltime_meta module end
Python解释器计算ClassFive类的定义体时没有调用type构建具体的类定义体,而是调用MetaAleph类.
MetaAleph类,__init__方法中的四个参数:
self:这是要初始化的类对象(例如ClassFive)
name,bases,dic:与构建类时传给type的参数一样
编写元类时,通常把self参数改成cls.清楚表明要构建的实例是类.
__init__方法的定义体中定义例如inner_2函数,然后将其绑定给cls.method_z.MetaALeph.__init__方法签名中的cls指代要创建的类(
例如ClassFive).而inner_2函数签名中的self最终是指代我们在创建的类的实例(例如ClassFive类的实例)
场景4在命令行运行python evaltime_meta.py
<[100]> evalsupport module start
<[400]> MetaAleph body
<[700]> evalsupport module end
<[1]> evaltime_meta module start
<[2]> ClassThree body
<[200]> deco_alpha
<[4]> ClassFour body
<[6]> ClassFive body
<[500]> MetaAleph.__init__
<[9]> ClassSix body
<[500]> MetaAleph.__init__
<[11]> ClassThree tests ..............................
<[300]> deco_alpha:inner_1 # 1.装饰器依附到ClassThree类上之后,method_y方法被替换成inner_1方法....
<[12]> ClassFour tests ..............................
<[5]> ClassFour.method_y # 2.虽然ClassFour是ClassThree的子类,但是没有依附装饰器的ClassFour类却不受影响
<[13]> ClassFive tests ..............................
<[7]> ClassFive.__init__
<[600]> MetaAleph.__init__:inner_2 # 3.MetaAleph类的__init__方法把ClassFive.method_z方法替换成inner_2函数
<[14]> ClassSix tests ..............................
<[7]> ClassFive.__init__
<[600]> MetaAleph.__init__:inner_2 # 4.ClassFive的子类ClassSix也是一样,method_z方法被替换成inner_2函数
<[15]> evaltime_meta module end
注意,ClassSix类没有直接引用MetaAleph类,但是却收到了影响,因为它是ClassFive的子类,进而也是MetaAleph类的实例,
所以由MetaAleph.__init__方法初始化
!!如果想进一步定制类,可以在源类中实现__new__方法.不过通常情况下实现__init__方法就够了


创建一个元类,让描述符以最佳的方式自动创建储存属性的名称
21.5 定制描述符的元类
回到LineItem系列示例.如果用户完全不知道描述符或元类,直接继承库提供的类就能满足需求,那该多好.
示例21-14 bulkfood_v7.py
示例21-15 model_v7.py
辅助模块model_v7.py比model_v6.py难理解,但是用户级别的代码更简单:只需继承model_v7.Entity类,Validated字段就能自动获取储存属性的名称.


21.6 元类的特殊方法__prepare__
某些应用中,可能需要知道类的属性定义的顺序
例如,对读写CSV文件的库来说,用户定义的类可能想把类中按顺序声明的字段与CSV文件中各列的顺序对应起来.
type构造方法及元类的__new__和__init__方法都会收到要计算的类的定义体,形式是名称到属性的映射.
然而在默认情况下,那个映射时字典;也就是说,元类或类装饰器获得映射时,属性在类定义体中的顺序已经丢失了.
使用__prepare__解决该问题.
这个特殊方法只在元类中有用,而且必须声明为类方法(即,要使用@classmethod装饰器定义).
解释器调用元类的__new__方法之前会先调用__prepare__方法,使用类定义体重的属性创建映射.
__prepare__方法的第一个参数是元类,随后两个参数分别是要构建的类的名称和基类组成的元组,返回值必须是映射.
元类构建新类时,__prepare__方法返回的映射会传给__new__方法的最后一个参数,然后再传给__init__方法
示例21-16 model_v8.py
之后,我们可以使用field_names类方法迭代任何Entity子类的Validated字段

框架和库会使用元类协助程序员执行很多任务,例如:
# 验证属性
# 一次把装饰器依附到多个方法上
# 序列化对象或转换数据
# 对象关系映射
# 基于对象的持久存储
# 动态转换使用其他语言编写的类结构


概述Python数据模型为所有类定义的方法
21.7 类作为对象
__mro__,__class__和__name__
cls.__bases__:
    由类的基类组成的元组
cls.__qualname__:
    Python3.3引入的新属性,其值是类或函数的限定名称,即从模块的全局作用域到类的点分路径.
    例如:示例21-6中,内部类ClassTwo的__qualname__属性,其值是字符串'ClassOne.ClassTwo',而__name__属性的值是'ClassTwo'
cls.__subclasses__():
    这个方法返回一个列表,包含类的直接子类.这个方法的实现使用弱引用,防止在超类和子类(子类在__bases__属性中储存指向超类的强引用)
    之间出现循环引用.这个方法返回的列表中是内存里现存的子类
cls.mro()
    构建类时,如果需要获取储存在类属性__mro__中的超类元组,解释器会调用这个方法.元类可以覆盖这个方法,定制要构建的类解析方法的顺序
!!dir(...)函数不会列出本节提到的任何一个属性


21.8 本章小结
类元编程是指动态创建或定制类.在Python中,类是一等对象,因此本章首先说明如何通过调用内置的type元类,使用函数创建类
使用类装饰器,让生成的储存属性名中包含托管属性的名称.
类装饰器是函数,其参数是被装饰的类,用于审查和修改刚创建的类,甚至替换成其他类.
"导入时"和"运行时"之间有重叠,不过很明显,import语句会触发运行大量代码.
元类,
所有类都直接或间接地是type的实例,因此在Python中,type是"根元类".元类可以定制类的层次结构.
类装饰器则不同,它只能影响一个类,而且对后代可能没有影响
使用元类解决LineItem类中储存属性的命名问题.
元类model.EntityMeta:定义__prepare__方法,返回一个OrderedDict对象,用于储存名称到属性的映射.
这样做能保留要构建的类在定义体中绑定属性的顺序,提供给元类的__new__和__init__等方式使用.