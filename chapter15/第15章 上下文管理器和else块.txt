第15章 上下文管理器和else块
with语句和上下文管理器
for,while和try语句的else子句
with语句会设置一个临时的上下文,交给上下文管理器对象控制,并且负责清理上下文.
这么做能避免错误并减少样板代码,因此API更安全,而且更易于使用.
else子句与with语句完全没有关系.
15.1 先做这个,再做那个:if语句之外的else块
else子句不仅能在if语句中使用,还能在for,while和try语句中使用
for/else,while/else和try/else的语义关系紧密,
不过与if/else差别很大.
else子句的行为如下.
for:仅当for循环运行完毕时(即for循环没有被break语句中止)才运行else块
while:仅当while循环因为条件为假值而退出时(即while循环没有被break语句中止)才运行else块
try:仅当try块中没有异常抛出时才运行else块.
else子句抛出的异常不会由前面的except子句处理
在所有情况下,如果异常或者return,break或continue语句导致控制权跳到了符合语句的主块之外,
else子句也会被跳过


强大的with语句
15.2 上下文管理器和with块
上下文管理器协议包含__enter__和__exit__两个方法.
执行with后面的表达式得到的结果是上下文管理器对象,不过把值绑定到目标变量上(as子句)是在上下文
管理器对象上调用了__enter__方法的结果
碰巧,open()函数返回TextIOWrapper类的实例,而该实例的__enter__方法返回self.
不过__enter__方法除了返回上下文管理器之外,还可能返回其他对象.
不管控制流程以哪种方式退出with块,都会在上下文管理器对象上调用__exit__方法,而不是在
__enter__方法返回的对象上调用
示例15-2 使用一个精心制作的上下文管理器执行操作,以此强调上下文管理器与__enter__方法返回的对象之间的区别
lookingglass_test.py
示例15-3 LookingGlass类的实现
mirror.py
在实际使用中,如果应用程序接管了标准输出,可能会暂时把sys.stdout换成类似文件的其他对象
,然后再切换成原来的版本
contextlib.redirect_stdout上下文管理器就是这么做的:只需传入类似文件的对象,用于替代sys.stdout
解释器调用__enter__方法时,除了隐式的self之外,不会传入任何参数.
传给__exit__方法的三个参数:
exc_type:
    异常类(例如ZeroDivisionError)
exc_value
    异常实例.有时会有参数传给异常构造方法,例如错误信息,这些参数可以使用exc_value.args获取
traceback
    traceback对象
上下文管理器的具体工作方式
实例15-4,在with块外使用LookingGlass类,
lookingglass_test.py


contextlib模块,提供了一些实用工具
15.3 contextlib模块中的使用工具
contextlib模块中的一些类和其他函数
redirect_stdout

closing
    如果对象提供了close()方法,但没有实现__enter__/__exit__协议,那么可以使用这个函数构建上下文管理器
suppress
    构建临时忽略指定异常的上下文管理器
@contextmanager
    这个装饰器把简单的生成器函数变成上下文管理器,这样就不用创建类去实现管理器协议了
ContextDecorator
    这是个基类,用于定义基于类的上下文管理器.
    这种上下文管理器也能用于装饰函数,在受管理的上下文中运行整个函数
ExitStack
    这个上下文管理器能进入多个上下文管理器.with块结束时,
    ExitStack按照后进先出的顺序调用栈中各个上下文管理器的__exti__方法.
    如果事先不知道with块要进入多少个上下文管理器,可以使用这个类.
    例如,同时打开任意一个文件列表中的所有文件.


15.4 使用@contextmanager (context:环境,上下文)
@contextmanager装饰器能减少创建上下文管理器的样板代码量,
因为不用编写一个完整的类,定义__enter__和__exit__方法,
而只需实现一个有yield语句的生成器,生成想让__enter__方法返回的值
在使用@contextmanager装饰的生成器中,yield语句的作用是把
函数的定义体分成两部分:yield语句前面的所有代码在with块开始时
(即解释器调用__enter__方法时)执行,
yield语句后面的代码在with块结束时(即调用__exit__方法时)执行
示例15-5 使用一个生成器函数代替15-3中的LookingGlass类
mirror_gen.py
示例15-6 使用looking_glass函数的例子
lookingglass_test.py

其实,contextlib.contextmanager装饰器会把函数包装成实现__enter__和__exit__方法的类
这个类的__enter__方法有如下作用.
1)调用生成器函数,保存生成器对象(这里把它称为gen)
2)调用next(gen),执行到yield关键字所在的位置
3)返回next(gen)产出的值,以便把产出的值绑定到with/as语句中的目标变量上

with块终止时,__exit__方法会做以下几件事.
1)检查有没有把异常传给exc_type;如果有,调用
gen.throw(exception),在生成器函数定义体中包含yield关键字的那一行抛出异常
2)否则,调用next(gen),继续执行生成器函数定义体中yield语句之后的代码

实例15-5 中有一个严重的错误:如果在with块中抛出了异常,Python解释器会将其捕获,
然后在looking_glass函数的yield表达式里再次抛出.
但是,那里没有处理错误的代码,因此looking_glass函数会中止,
永远无法恢复成原来的sys.stdout.write方法,导致系统处于无效状态
示例15-7处理ZeroDivisionError异常;
