第五部分 控制流程
第14章 可迭代的对象,迭代器和生成器
当我在自己的程序中发现用到了模式,我觉得这就表明某个地方出错了.
程序的形式应该仅仅反映它所要解决的问题.代码中其他任何外加的形式都是一个信号,(至少对我来说)
表明我对问题的抽象还不够深---这通常意味着自己正在手动完成的事情,本应该通过写代码来让宏的扩展
自动实现
                            -------Paul Graham

迭代是数据处理的基石.扫描内存中放不下的数据集时,我们要找到一种惰性获取数据项的方式,
即按需一次获取一个数据项.
这就是迭代器模式(Iterator pattern).
Python没有宏,因此为了抽象出迭代器模式,需要改动语言本身.
Python2.2加入了yield关键字
这个关键字用于构建生成器(generator),其作用与迭代器一样
所有生成器都是迭代器,因为生成器完全实现了迭代器接口.
迭代器用于从集合中取出元素;而生成器用于"凭空"生成元素
在Python中,所有集合都可以迭代.
在Python语言内部,迭代器用于支持:
for循环
构建和扩展集合类型
逐行遍历文本文件
列表推导,字典推导和集合推导
元组拆包
调用函数时,使用*拆包实参

本章话题:
语言内部使用iter()内置函数处理可迭代对象的方式
如何使用Python实现经典的迭代器模式
详细说明生成器函数的工作原理
如何使用生成器函数或生成器表达式代替经典的迭代器
如何使用标准库中通用的生成器函数
如果使用yield from语句合并生成器
案例分析:在一个数据库转换工具中使用生成器函数处理大型数据集
为什么生成器和协程看似相同,实则差别很大,不能混淆

iter(...)函数如何把序列变得可以迭代
14.1 Sentence类第1版:单词序列
实现一个Sentence类,以此打来探索可迭代对象的旅程.
我们向这个类的构造方法传入包含一些文本的字符串,然后可以逐个单词迭代.
第1版要实现序列协议,这个类的对象可以迭代,因为所有序列都可以迭代
示例14-1 定义一个Sentence类,通过索引从文本中提取单词
示例14-1 sentence.py:把句子划分为单词序列
