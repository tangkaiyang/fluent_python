第16章 协程
在协程中,yield通常出现在表达式的右边(如,datum=yield),可以产出值,也可以不产出(如果yield关键字后面没有表达式,那么生成器产出None),协程可能会从调用方接收数据,不过调用方把数据提供给协程使用的是.send(datum)方法,
而不是next(...)函数.通常,调用方会把值推送给协程
yield关键字甚至还可以不接收货传出数据.不管数据如何流动,yield都是一种流程控制工具,使用它可以实现协作式多任务:
协程可以把控制器让步给中心调度程序,从而激活其他的协程

生成器作为协程使用时的行为和状态
使用装饰器自动预激协程
调用方如何使用生成器对象的.close()和.throw(...)方法控制协程
协程终止时如何返回值
yield from新句法的用途和语义(async await 关键字)
使用案例---使用协程管理仿真系统中的并发活动

16.1 生成器如何进化成协程
生成器的调用方可以使用.send(...)方法发送数据,发送的数据会成为生成器函数中yield表达式的值.
因此,生成器可以作为协程使用.
协程是指一个过程,这个过程与调用方协作,产出由调用方提供的值
除了.send(...)方法,还有.throw(...)和.close()方法:前者的作用是让调用方抛出异常,在生成器中处理;后者的作用是终止生成器.
生成器句法的两处改动:
生成器可以返回一个值;以前,如果在生成器中给return语句提供值,会抛出SyntaxError异常
新引入了yield from句法,使用它可以把复杂的生成器重构成小型的嵌套生成器,省去了之前把生成器的工作委托给自生成器所需的大量样板代码


基本概念和示例
16.2 用作协程的生成器的基本行为
示例16-1展示了协程的行为
simple_coroutine.py
协程可以身处四个状态中的一个.当前状态可以使用inspect.getgeneratorstate(...)函数确定,该函数会返回下述字符串中的一个.
'GEN_CREATED':等待开始执行
'GEN_RUNNING':解释器正在执行
只有在多线程应用中才能看到这个状态.此外,生成器对象在自己身上调用getgeneratorstate函数也行,不过这样做没什么用
'GEN_SUSPENDED':在yield表达式处暂停
'GEN_CLOSED':执行结束
因为send方法的参数会成为暂停的yield表达式的值,所以,仅当协程处于暂停状态时才能调用send方法.
例如my_coro.send(42).不过,如果协程还没激活(即,状态时'GEN_CREATED'),情况就不同了.
因此,始终要调用next(my_coro)激活协程--也可以调用my_coro.send(None),效果一样.
如果创建协程对象之后立即把None之外的值发给它,会出现下述错误:
simple_coroutine.py
my_coro = simple_coroutine()
my_coro.send(1729)
报错:TypeError: can't send non-None value to a just-started generator
最先调用next(my_coro)函数这一步通常称为"预激"(prime)协程(即,让协程向前执行到第一个yield表达式,准备好作为活跃的协程使用)
示例16-2 产出两个值的协程
simple_coro2.py
协程在yield关键字所在的位置暂停执行.
在赋值语句中,=右边的代码在赋值之前执行.
因此,对于b = yield a这行代码来说,等到客户端代码再激活协程时才会设定b的值


稍微复杂的协程示例
16.3 示例: 使用协程计算移动平均值
示例16-3 coroaverager0.py:定义一个计算移动平均值的协程


如何启动协程.使用协程之前必须预激
在协程上使用一个特殊的装饰器
16.4 预激协程的装饰器
示例16-5 coroutil.py: 预激协程的装饰器
示例16-6 展示@coroutine装饰器的用法 coroaverager1.py

使用yield from句法调用协程时,会自动预激,因此与示例16-5中的@coroutine等装饰器不兼容
Python3.4标准库里的asyncio.coroutine装饰器不会预激协程,因此能兼容yield from句法


接下来探讨协程的重要特性--用于终止协程,以及在协程中抛出异常的方法
16.5 终止协程和异常处理
协程中未处理的异常会向上冒泡,传给next函数或send方法的调用方(即触发协程的对象)
示例16-7 未处理的异常会导致协程终止
coroaverager1.py
终止协程的一种方式:发送某个哨符值,让协程退出.内置的None和Ellipsis等常量经常作为哨符值.
Ellipsis的优点是,数据流中不太常有这个值.
从Python2.5开始,客户代码可以在生成器对象上调用两个方法,显示地把异常发给协程.
这两个方法是throw和close
generator.throw(exc_type[, exc_value[, traceback]])
致使生成器在暂停的yield表达式处抛出指定的异常.如果生成器处理了抛出的异常,代码会向前执行到下一个yield表达式,
而产出的值会成为调用generator.throw方法得到的返回值.如果生成器没有处理抛出的异常,异常会向上冒泡,传到调用方的上下文中
generator.close()
致使生成器在暂停的yield表达式处抛出GeneratorExit异常.如果生成器没有处理这个异常,或者抛出了StopIteration异常
(通常是指运行到结尾),调用方不会报错.如果收到GeneratorExit异常,生成器一定不能产出值,否则解释器会抛出RuntimeError异常.
生成器抛出的其他异常会向上冒泡,传给调用方
使用close和throw方法控制协程
示例16-8 coro_exc_demo.py: 学习在协程中处理异常的测试代码

如果不管协程如何结束都想做些清理工作,要把协程定义体中相关的代码放入try/finally块中.
示例16-12 coro_finally_demo.py


Python3.3引入yield from结构的主要原因之一把异常传入嵌套的协程有关.另一个原因是让协程更方便地返回值.
16.6 让协程返回值
某些协程不会产出值,而是在最后返回一个值(通常是某种累计值)
示例16-13中的averager协程返回的结果是一个namedtuple,两个字段分别是项数(count)和平均值(average)
本可以只返回平均值,但是返回一个元组可以获得累积数据的另一个重要信息--项数
coroaverager2.py
获取协程的返回值虽然要绕个圈子,
yield from结构会在内部自动捕获StopIteration异常.这种处理方式与for循环处理StopIteration异常的方式一样:
循环机制使用用户易于理解的方式处理异常.
对yield from结构来说,解释器不仅会捕获StopIteration异常,还会把value属性的值变成yield from表达式的值


yield from结构
16.7 使用yield from
在生成器gen中使用yield from subgen()时,subgen会获得控制权,把产出的值传给gen的调用方,
即调用方可以直接控制subgen.于此同时,gen会阻塞,等待subgen终止

yield from可用于简化for循环中的yield表达式
def gen():
    for c in 'AB':
        yield c
    for i in range(1, 3):
        yield i
list(gen()) --> ['A', 'B', 1, 2]
可改写为:
def gen():
    yield from 'AB'
    yield from range(1, 3)
list(gen()) --> ['A', 'B', 1, 2]

示例16-16 使用yield from链接可迭代的对象
def chain(*iterables):
    for it in iterables:
        yield from it
s = 'ABC'
t = tuple(range(3))
list(chain(s, t)) -- > ['A', 'B', 'C', 0, 1, 2]
# itertools.chain为优化版,使用C语言编写
yield from x表达式对x对象所做的第一件事是,调用iter(x),从中获取迭代器.因此,x可以是任何可迭代的对象
yield from的主要功能是打开双向通道,把最外层的调用方与最内层的子生成器连接起来,这样二者可以直接发送和产出值,
还可以直接传入异常,而不用在位于中间的协程中添加大量处理异常的样板代码.
协程可以通过以前不可能的方式委托职责

委派生成器
    包含yield from <iterable>表达式的生成器函数
子生成器
    从yield from表达式中<iterable>部分获取的生成器.(subgenerator)
调用方
    指代调用委派生成器的客户端代码.
    在不同的语境中,会使用客户端代替调用方,以此与委派生成器(也是调用方,因为它调用了子生成器)区分开
引入yield from结构的目的是为了支持实现了__next__,send,close和throw方法的生成器
调用方                     委派生成器                               子生成器
send-----------------------_________------------------------------>
<--------------------------_________-------------------------------yield
throw----------------------_________------------------------------->
close----------------------_________------------------------------->
                                <---------------------------------StopIteration
委派生成器在yield from表达式处暂停时,调用方可以直接把数据发给子生成器,子生成器再把产出的值发给调用方.
子生成器返回之后,解释器会抛出StopIteration异常,并把返回值附加到异常对象上,此时委派生成器会恢复
示例16-17coroaverager3.py: 使用yield from计算平均值并输出统计报告