第16章 协程
在协程中,yield通常出现在表达式的右边(如,datum=yield),可以产出值,也可以不产出(如果yield关键字后面没有表达式,那么生成器产出None),协程可能会从调用方接收数据,不过调用方把数据提供给协程使用的是.send(datum)方法,
而不是next(...)函数.通常,调用方会把值推送给协程
yield关键字甚至还可以不接收货传出数据.不管数据如何流动,yield都是一种流程控制工具,使用它可以实现协作式多任务:
协程可以把控制器让步给中心调度程序,从而激活其他的协程

生成器作为协程使用时的行为和状态
使用装饰器自动预激协程
调用方如何使用生成器对象的.close()和.throw(...)方法控制协程
协程终止时如何返回值
yield from新句法的用途和语义(async await 关键字)
使用案例---使用协程管理仿真系统中的并发活动

16.1 生成器如何进化成协程
生成器的调用方可以使用.send(...)方法发送数据,发送的数据会成为生成器函数中yield表达式的值.
因此,生成器可以作为协程使用.
协程是指一个过程,这个过程与调用方协作,产出由调用方提供的值
除了.send(...)方法,还有.throw(...)和.close()方法:前者的作用是让调用方抛出异常,在生成器中处理;后者的作用是终止生成器.
生成器句法的两处改动:
生成器可以返回一个值;以前,如果在生成器中给return语句提供值,会抛出SyntaxError异常
新引入了yield from句法,使用它可以把复杂的生成器重构成小型的嵌套生成器,省去了之前把生成器的工作委托给自生成器所需的大量样板代码


基本概念和示例
16.2 用作协程的生成器的基本行为
示例16-1展示了协程的行为
simple_coroutine.py
协程可以身处四个状态中的一个.当前状态可以使用inspect.getgeneratorstate(...)函数确定,该函数会返回下述字符串中的一个.
'GEN_CREATED':等待开始执行
'GEN_RUNNING':解释器正在执行
只有在多线程应用中才能看到这个状态.此外,生成器对象在自己身上调用getgeneratorstate函数也行,不过这样做没什么用
'GEN_SUSPENDED':在yield表达式处暂停
'GEN_CLOSED':执行结束
因为send方法的参数会成为暂停的yield表达式的值,所以,仅当协程处于暂停状态时才能调用send方法.
例如my_coro.send(42).不过,如果协程还没激活(即,状态时'GEN_CREATED'),情况就不同了.
因此,始终要调用next(my_coro)激活协程--也可以调用my_coro.send(None),效果一样.
如果创建协程对象之后立即把None之外的值发给它,会出现下述错误:
simple_coroutine.py
my_coro = simple_coroutine()
my_coro.send(1729)
报错:TypeError: can't send non-None value to a just-started generator
最先调用next(my_coro)函数这一步通常称为"预激"(prime)协程(即,让协程向前执行到第一个yield表达式,准备好作为活跃的协程使用)
示例16-2 产出两个值的协程
simple_coro2.py
协程在yield关键字所在的位置暂停执行.
在赋值语句中,=右边的代码在赋值之前执行.
因此,对于b = yield a这行代码来说,等到客户端代码再激活协程时才会设定b的值


稍微复杂的协程示例
16.3 示例: 使用协程计算移动平均值
示例16-3 coroaverager0.py:定义一个计算移动平均值的协程


如何启动协程.使用协程之前必须预激
在协程上使用一个特殊的装饰器
16.4 预激协程的装饰器
示例16-5 coroutil.py: 预激协程的装饰器
示例16-6 展示@coroutine装饰器的用法 coroaverager1.py

使用yield from句法调用协程时,会自动预激,因此与示例16-5中的@coroutine等装饰器不兼容
Python3.4标准库里的asyncio.coroutine装饰器不会预激协程,因此能兼容yield from句法


接下来探讨协程的重要特性--用于终止协程,以及在协程中抛出异常的方法
16.5 终止协程和异常处理
协程中未处理的异常会向上冒泡,传给next函数或send方法的调用方(即触发协程的对象)
示例16-7 未处理的异常会导致协程终止
coroaverager1.py
终止协程的一种方式:发送某个哨符值,让协程退出.内置的None和Ellipsis等常量经常作为哨符值.
Ellipsis的优点是,数据流中不太常有这个值.
从Python2.5开始,客户代码可以在生成器对象上调用两个方法,显示地把异常发给协程.
这两个方法是throw和close
generator.throw(exc_type[, exc_value[, traceback]])
致使生成器在暂停的yield表达式处抛出指定的异常.如果生成器处理了抛出的异常,代码会向前执行到下一个yield表达式,
而产出的值会成为调用generator.throw方法得到的返回值.如果生成器没有处理抛出的异常,异常会向上冒泡,传到调用方的上下文中
generator.close()
致使生成器在暂停的yield表达式处抛出GeneratorExit异常.如果生成器没有处理这个异常,或者抛出了StopIteration异常
(通常是指运行到结尾),调用方不会报错.如果收到GeneratorExit异常,生成器一定不能产出值,否则解释器会抛出RuntimeError异常.
生成器抛出的其他异常会向上冒泡,传给调用方
使用close和throw方法控制协程
示例16-8 coro_exc_demo.py: 学习在协程中处理异常的测试代码

如果不管协程如何结束都想做些清理工作,要把协程定义体中相关的代码放入try/finally块中.
示例16-12 coro_finally_demo.py


Python3.3引入yield from结构的主要原因之一把异常传入嵌套的协程有关.另一个原因是让协程更方便地返回值.
16.6 让协程返回值
某些协程不会产出值,而是在最后返回一个值(通常是某种累计值)
示例16-13中的averager协程返回的结果是一个namedtuple,两个字段分别是项数(count)和平均值(average)
本可以只返回平均值,但是返回一个元组可以获得累积数据的另一个重要信息--项数
coroaverager2.py
获取协程的返回值虽然要绕个圈子,
yield from结构会在内部自动捕获StopIteration异常.这种处理方式与for循环处理StopIteration异常的方式一样:
循环机制使用用户易于理解的方式处理异常.
对yield from结构来说,解释器不仅会捕获StopIteration异常,还会把value属性的值变成yield from表达式的值


yield from结构
16.7 使用yield from
在生成器gen中使用yield from subgen()时,subgen会获得控制权,把产出的值传给gen的调用方,
即调用方可以直接控制subgen.于此同时,gen会阻塞,等待subgen终止

yield from可用于简化for循环中的yield表达式
def gen():
    for c in 'AB':
        yield c
    for i in range(1, 3):
        yield i
list(gen()) --> ['A', 'B', 1, 2]
可改写为:
def gen():
    yield from 'AB'
    yield from range(1, 3)
list(gen()) --> ['A', 'B', 1, 2]

示例16-16 使用yield from链接可迭代的对象
def chain(*iterables):
    for it in iterables:
        yield from it
s = 'ABC'
t = tuple(range(3))
list(chain(s, t)) -- > ['A', 'B', 'C', 0, 1, 2]
# itertools.chain为优化版,使用C语言编写
yield from x表达式对x对象所做的第一件事是,调用iter(x),从中获取迭代器.因此,x可以是任何可迭代的对象
yield from的主要功能是打开双向通道,把最外层的调用方与最内层的子生成器连接起来,这样二者可以直接发送和产出值,
还可以直接传入异常,而不用在位于中间的协程中添加大量处理异常的样板代码.
协程可以通过以前不可能的方式委托职责

委派生成器
    包含yield from <iterable>表达式的生成器函数
子生成器
    从yield from表达式中<iterable>部分获取的生成器.(subgenerator)
调用方
    指代调用委派生成器的客户端代码.
    在不同的语境中,会使用客户端代替调用方,以此与委派生成器(也是调用方,因为它调用了子生成器)区分开
引入yield from结构的目的是为了支持实现了__next__,send,close和throw方法的生成器
调用方                     委派生成器                               子生成器
send-----------------------_________------------------------------>
<--------------------------_________-------------------------------yield
throw----------------------_________------------------------------->
close----------------------_________------------------------------->
                                <---------------------------------StopIteration
委派生成器在yield from表达式处暂停时,调用方可以直接把数据发给子生成器,子生成器再把产出的值发给调用方.
子生成器返回之后,解释器会抛出StopIteration异常,并把返回值附加到异常对象上,此时委派生成器会恢复
示例16-17coroaverager3.py: 使用yield from计算平均值并输出统计报告
如果子生成器不终止,委派生成器就会在yield from表达式永远暂停.
如果是这样,程序不会向前执行,因此yield from(与yield一样)把控制权转交给客户代码(即,委派生成器的调用方)了.显然,肯定有任务无法完成
示例16-17展示了yield from结构嘴简单的用法,只有一个委派生成器和一个子生成器.
因为委派生成器相当于管道,所以可以把任意数量个委派生成器连接在一起:
一个委派生成器使用yield from调用一个子生成器,而哪个子生成器自身也是委派生成器,使用yield from调用另一个子生成器,以此类推.
最终,这个链条要以一个只使用yield表达式的简单生成器结束;不过也能以任何可迭代对象结束
任何yield from链条都必须由客户端驱动,在最外层委派生成器上调用next(...)函数或.send(...)方法.可以隐式调用,例如使用for循环


对yield from结构的正式说明
16.8 yield from的意义
~子生成器产出的值都直接传给委派生成器的调用方(即客户端代码)
~使用send()方法发给委派生成器的值都直接传给子生成器.如果发送的值不是None,那么会调用子生成器的__next__()方法.如果发送的值不是None,那么会调用子生成器的send()方法.如果调用的方法抛出StopIteration异常,那么委派生成器恢复运行.任何其他异常都会向上冒泡,传给委派生成器.
~生成器退出时,生成器(或子生成器)中的return expr表达式会触发StopIteration(expr)异常抛出
~yield from表达式的值是子生成器终止时传给StopIteration异常的第一个参数
yield from结构的另外两个特性与异常和终止有关
~传入委派生成器的异常,处理GeneratorExit之外都传给子生成器的throw()方法.如果调用throw()方法时抛出StopIteration异常,委派生成器恢复运行.StopIteration之外的异常会向上冒泡,传给委派生成器.
如果把GeneratorExit异常传入委派生成器,或者在委派生成器上调用close()方法,那么在子生成器上调用close()方法,如果它有的话.如果调用close()方法导致异常抛出,那么异常会向上冒泡,传给委派生成器;否则,委派生成器抛出GeneratorExit异常

yield from最基本最常见的用法:
假设yield from出现在委派生成器中.客户端代码驱动着委派生成器,而委派生成器驱动着子生成器.
那么,为了简化涉及到的逻辑,我们假设客户端没有在委派生成器上调用.throw(...)或.close()方法.
此外,我们还假设子生成器不会抛出异常,而是一直运行到终止,让解释器抛出StopIteration异常

RESULT = yield from EXPR
示例16-18 简化的伪代码,等效于委派生成器中的RESULT = yield from EXPR语句
(这里针对的是最简单的情况:不支持.throw(...)和.close()方法,而且只处理StopIteration异常)
_i = iter(EXPR) # EXPR可以是任何可迭代对象,因为获取迭代器_i(这是子生成器)使用的是iter()函数.
try:
    _y = next(_i)   # 预激子生成器;结果保存在_y中,作为产出的第一个值
except StopIteration as _e:
    _r = _e.value   # 如果抛出StopIteration异常,获取异常对象的value属性,赋值给_r(最简单情况下的返回值(RESULT))
else:
    while 1: # 运行这个循环是,委派生成器会阻塞,只作为调用方和子生成器之间的通道
        _s = yield _y   # 产出子生成器当前产出的元素;等待调用方发送_s中保存的值
        try:
            _y  = _i.send(_s)   # 尝试让子生成器向前执行,转发调用方发送的_s
        except StopIteration as _e: # 如果子生成器抛出StopIteration异常,获取value属性的值,赋值给_r,然后退出循环,让委派生成器恢复运行
            _r = _e.value
            break
RESULT = _r # 返回的结果(RESULT)是_r,即整个yield from表达式的值
_i(迭代器):子生成器
_y(产出的值):子生成器产出的值
_r(结果):最终的结果(即子生成器运行结束后yield from表达式的值)
_s(发送的值):调用方发给委派生成器的值,这个值会转发给子生成器
_e(异常):异常对象(在这段简化的伪代码中始终是StopIteration实例)
没有处理.throw(...)和.close()方法之外,这段简化的伪代码还在子生成器上调用.send(...)方法,以此达到客户调用next()函数或.send(...)方法的目的.

但是,现实情况要复杂一些,因为要处理客户对.throw(...)和.close()方法的调用,而这两个方法执行的操作必须传入子生成器.
此外,子生成器可能只是纯粹的迭代器,不支持.throw(...)和.close()方法,因此yield from结构的逻辑必须处理这种情况.如果子生成器实现了这两种方法,而在子生成器内部,这两个方法
都会触发异常抛出,这种情况也必须由yield from机制处理.调用方可能会无缘无故地让子生成器自己抛出异常,
实现yield from结构时也必须处理这种情况.最后,为了优化,如果调用方调用next(...)函数或.send(None)方法,都要转交职责,在子生成器上调用next(...)函数;仅当调用方发送的值不是None时,
才使用子生成器的.send(...)方法

示例16-19 伪代码,等效于委派生成器中的RESULT = yield from EXPR语句
_i = iter(EXPR) # 1)EXPR可以是任何可迭代对象,因为获取迭代器_i(这是子生成器)使用的是iter()函数
try:
    _y = next(_i)   # 2)预激子生成器;结果保存在_y中,作为产出的第一个值
except StopIteration as _e:
    _r = _e.value   #3)如果抛出StopIteration异常,获取异常对象的value属性,赋值给_r--这是最简单情况下的返回值(RESULT)
else:
    while 1: # 4)运行这个循环时,委派生成器会阻塞,只作为调用方和子生成器之间的通道
        try:
            _s = yield _y # 5)产出子生成器当前产出的元素;等待调用方发送_s中保存的值.这个代码清单中只有这一个yield表达式
        except GeneratorExit as _e: # 6)这一部分用于关闭委派生成器和子生成器.因为子生成器可以是任何可迭代的对象,所以可能没有close方法.
            try:
                _m = _i.close
            except AttributeError:
                pass
            else:
                _m()
            raise _e
        except BaseException as _e: # 7)这一部分处理调用方通过.throw()方法传入的异常,同样,子生成器可以是迭代器 ,从而没有throw方法可调用--这种情况会导致委派生成器抛出异常
            _x = sys.exc_info()
            try:
                _m = _i.throw
            except AttributeError:
                raise _e
            else: # 8)如果子生成器有throw方法,调用它并传入调用方发来的异常.子生成器可能会处理传入的异常(然后继续循环);可能抛出StopIteration异常(从中获取结果,赋值给_r,循环结束);还可能不处理,而是抛出相同或不同的异常,向上冒泡,传给委派生成器0
                try:
                    _y = _m(*_x)
                except StopIteration as _e:
                    _r = _e.value
                    break
        else: # 9)如果产出值时没有异常..
            try: # 10)尝试让子生成器向前执行..
                if _s is None:  # 11)
                    _y = next(_i)
                else:
                    _y = _i.send(_s)
            except StopIteration as _e:  # 12)
                _r = _e.value
                break


RESULT = _r # 13)
要预激子生成器.这表明,用于自动预激的装饰器与yield from结构不兼容


使用协程的经典案例:仿真编程.
没有展示yield from结构的用法,
揭示了如何使用协程在单个线程中管理并发活动.
16.9 使用案例:使用协程做离散事件仿真
协程能自然地表述很多算法,例如仿真,游戏,异步I/O,以及其他事件驱动型编程形式或协作式多任务
16.9.1 离散事件仿真简介
离散事件反震(Discrete Event Simulation, DES)是一种把系统建模成一系列事件的仿真模型.
在离散事件仿真中,仿真"钟"向前推进的量不是固定的,而是直接推进到下一个事件模型的模拟事件.
离散事件仿真:回合制
连续仿真:实时游戏
SimPy是一个实现离散事件仿真的Python包,通过一个协程表示离散事件仿真系统中的各个进程
在仿真领域,进程这个术语指代模型中某个实体的活动,与操作系统中的进程无关.
仿真系统的一个进程可以使用操作系统中的一个进程实现,但是通常会使用一个线程或一个协程实现.
16.9.2 出租车队运营仿真
仿真程序taxi_sim.py会创建几辆出租车,每辆车会拉几个乘客,然后回家.出租车首先驶离车库,四处徘徊,寻找乘客;拉到乘客后,行程开始;乘客下车后,继续四处徘徊.
simulator:模拟器
taxi_process(一个协程)
执行仿真主循环的Simulator.run方法
示例16-20是taxi_process函数的代码.这个协程用到了别处定义的两个对象:
compute_delay函数,返回单位为分钟的时间间隔;
Event类,一个namedtuple,
Event = collections.namedtuple('Event', 'time proc action')
time字段是事件发生的仿真时间,
proc字段是出租车进程实例的编号,action字段是描述活动的字符串
示例16-20 taxi_sim.py taxi_process协程,实现各辆出租车的活动

16.10 本章小结
生成器三种不同的代码编写风格
传统的"拉取式"(迭代器)
"推送式"(例如计算平均值那个示例)
"任务式"

计算移动平均值的示例展示了协程的常见用途:累加器,处理接受到的值.
可以在协程上应用装饰器,预激协程;在某些情况下,这么做很方便.
但是,预激装饰器与协程的某些用法不兼容.尤其是
yield from subgenerator(),这个结构假定subgenerator没有预激,然后自动预激

每次调用send方法时,作为累加器使用的协程可以获取部分结果,不过能返回值的写成更有用.
现在生成器中的return the_result语句会抛出StopIteration(the_result)异常,这样调用方可以从异常的value属性中获取the_result.这样获取协程的结果还是很麻烦
yield from能自动处理
yield from结构的三个主要组件:
委派生成器(在定义体中使用yield from),
yield from激活的子生成器,
以及通过委派生成器中yield from表达式架设起来的通道把值发给子生成器,从而驱动整个过程的客户代码.

离散事件仿真示例,说明如何使用生成器代替线程和回调,实现并发
驱动型框架(如Tornado和asyncio)的运作方式:
在单个线程中使用一个主循环驱动协程执行并发活动.使用协程做面向事件编程时,协程会不断
把控制权让步给主循环,激活并向前运行其他协程,从而执行各个并发活动.
这是一种协作式多任务 :协程显示自主地把控制权让步给中央调度程序.
而多线程实现的是抢占是多任务.调度程序可以在任何是可暂停线程(即使在执行一个语句的过程中),
把控制权让给其他线程
